Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(282,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(282,21)
<Remainder>
LOOP END

LOOP BEGIN at path.c(114,5) inlined into path.c(282,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(116,9) inlined into path.c(282,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(282,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(282,21)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(282,21)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(282,21)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(282,21)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(216,5) inlined into path.c(284,13)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(220,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 219 and call:fprintf(FILE *__restrict__, line 220
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 220 and  line 219

   LOOP BEGIN at path.c(218,9) inlined into path.c(284,13)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(62,5) inlined into path.c(287,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at path.c(62,5) inlined into path.c(287,9)
   remark #15389: vectorization support: reference ori_graph has unaligned access   [ path.c(64,13) ]
   remark #15389: vectorization support: reference ori_graph has unaligned access   [ path.c(64,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.786
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 5.810 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(62,5) inlined into path.c(287,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at path.c(288,9)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at path.c(130,5) inlined into path.c(291,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 148 and cpd_graph line 143
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 143 and cpd_graph line 148

   LOOP BEGIN at path.c(134,9) inlined into path.c(291,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 148 and cpd_graph line 143
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 143 and cpd_graph line 148
   LOOP END
LOOP END

LOOP BEGIN at path.c(312,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(90,5) inlined into path.c(314,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(26,5) inlined into path.c(314,20)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at path.c(27,9) inlined into path.c(314,20)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at path.c(27,9) inlined into path.c(314,20)
            remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(29,13) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 1.000
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15460: masked strided loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 11 
            remark #15477: vector loop cost: 2.500 
            remark #15478: estimated potential speedup: 4.150 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at path.c(27,9) inlined into path.c(314,20)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(161,5) inlined into path.c(325,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(165,9) inlined into path.c(325,9)
      remark #15415: vectorization support: gather was generated for the variable ori_cpd:  indirect access    [ path.c(173,37) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.035
      remark #15300: LOOP WAS VECTORIZED
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 59 
      remark #15477: vector loop cost: 31.870 
      remark #15478: estimated potential speedup: 1.820 
      remark #15482: vectorized math library calls: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at path.c(165,9) inlined into path.c(325,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at path.c(200,5) inlined into path.c(333,31)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 203 and sum2 line 203
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 203 and sum2 line 203
LOOP END

LOOP BEGIN at path.c(216,5) inlined into path.c(337,13)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(220,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 219 and call:fprintf(FILE *__restrict__, line 220
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 220 and  line 219

   LOOP BEGIN at path.c(218,9) inlined into path.c(337,13)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(33,5) inlined into path.c(314,20)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(35,9) inlined into path.c(314,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(38,13) inlined into path.c(314,20)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(38,13) inlined into path.c(314,20)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(41,30) ]
         remark #15389: vectorization support: reference col has unaligned access   [ path.c(43,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(38,13) inlined into path.c(314,20)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.c(256,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.c(258,9) ]
LOOP END
===========================================================================

Begin optimization report for: sgenrand(unsigned long, struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between config line 60 and config line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: genrand(struct mt19937p *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(77,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(78,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(78,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(79,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(79,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.150
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(77,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(82,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(82,13) ]
   remark #15388: vectorization support: reference config has aligned access   [ mt19937p.c(83,13) ]
   remark #15389: vectorization support: reference config has unaligned access   [ mt19937p.c(83,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: gather was generated for the variable config:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.128
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 13 
   remark #15477: vector loop cost: 9.750 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at mt19937p.c(81,9)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: square(int, ddt *__restrict__, ddt *__restrict__, ddt *__restrict__)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(26,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(27,9)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at path.c(27,9)
      remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(29,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 4.150 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at path.c(27,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at path.c(33,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(35,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(38,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(38,13)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(41,30) ]
         remark #15389: vectorization support: reference col has unaligned access   [ path.c(43,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(38,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: shortest_paths(int, int, int, ddt *, MPI_Comm, MPI_Comm)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(90,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(26,5) inlined into path.c(92,24)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(27,9) inlined into path.c(92,24)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(27,9) inlined into path.c(92,24)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(29,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 2.500 
         remark #15478: estimated potential speedup: 4.150 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(27,9) inlined into path.c(92,24)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(33,5) inlined into path.c(92,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(35,9) inlined into path.c(92,24)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(38,13) inlined into path.c(92,24)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at path.c(38,13) inlined into path.c(92,24)
         remark #15389: vectorization support: reference row_T has unaligned access   [ path.c(41,30) ]
         remark #15389: vectorization support: reference col has unaligned access   [ path.c(43,30) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.680
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 3.120 
         remark #15478: estimated potential speedup: 5.270 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(38,13) inlined into path.c(92,24)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: gen_graph(int, double)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(113,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(113,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(114,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(116,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(117,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.100
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(117,25)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(117,25)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.205
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.750 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(117,25)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(117,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_cpd(ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(130,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 148 and cpd_graph line 143
   remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 143 and cpd_graph line 148

   LOOP BEGIN at path.c(134,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 148 and cpd_graph line 143
      remark #15346: vector dependence: assumed OUTPUT dependence between cpd_graph line 143 and cpd_graph line 148
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: copy_to_ori(ddt *, ddt *, int, int, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(161,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 173 and cpd_graph line 173
   remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 173 and ori_graph line 173

   LOOP BEGIN at path.c(165,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ori_graph line 173 and cpd_graph line 173
      remark #15346: vector dependence: assumed ANTI dependence between cpd_graph line 173 and ori_graph line 173
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fletcher16(ddt *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(200,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 203 and sum2 line 203
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 203 and sum2 line 203
LOOP END
===========================================================================

Begin optimization report for: write_matrix(const char *, int, ddt *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at path.c(216,5)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(220,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fprintf(FILE *__restrict__, line 219 and call:fprintf(FILE *__restrict__, line 220
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 220 and  line 219

   LOOP BEGIN at path.c(218,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(219,13) ]
   LOOP END
LOOP END
===========================================================================
