
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(230,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(230,14)
<Remainder>
LOOP END

LOOP BEGIN at path.c(142,5) inlined into path.c(230,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(143,9) inlined into path.c(230,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(230,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(79,60) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 13 
         remark #15477: vector loop cost: 10.120 
         remark #15478: estimated potential speedup: 1.270 
         remark #15479: lightweight vector operations: 26 
         remark #15481: heavy-overhead vector operations: 2 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(230,14)
      <Peeled>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(230,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable mag01:  indirect access, 64bit indexed   [ mt19937p.c(83,64) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 9.870 
         remark #15478: estimated potential speedup: 1.200 
         remark #15479: lightweight vector operations: 22 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(230,14)
      <Remainder>
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(230,14)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(185,5) inlined into path.c(232,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(187,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(188,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 187 and  line 188
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 188 and  line 187

   LOOP BEGIN at path.c(186,9) inlined into path.c(232,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(187,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(82,5) inlined into path.c(236,5)
<Peeled>
LOOP END

LOOP BEGIN at path.c(82,5) inlined into path.c(236,5)
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(84,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(84,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 6.140 
   remark #15479: lightweight vector operations: 10 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(82,5) inlined into path.c(236,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(112,5) inlined into path.c(236,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at path.c(118,5) inlined into path.c(236,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at path.c(89,5) inlined into path.c(236,5)
<Peeled>
LOOP END

LOOP BEGIN at path.c(89,5) inlined into path.c(236,5)
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(91,13) ]
   remark #15389: vectorization support: reference l has unaligned access   [ path.c(91,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 14 
   remark #15477: vector loop cost: 1.250 
   remark #15478: estimated potential speedup: 7.790 
   remark #15479: lightweight vector operations: 10 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(89,5) inlined into path.c(236,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(171,5) inlined into path.c(243,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 173 and sum2 line 173
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 173 and sum2 line 173
LOOP END

LOOP BEGIN at path.c(185,5) inlined into path.c(247,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(187,13) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(188,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 187 and  line 188
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 188 and  line 187

   LOOP BEGIN at path.c(186,9) inlined into path.c(247,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(187,13) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(49,5) inlined into path.c(236,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(50,9) inlined into path.c(236,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(52,13) inlined into path.c(236,5)
      <Peeled>
      LOOP END

      LOOP BEGIN at path.c(52,13) inlined into path.c(236,5)
         remark #15389: vectorization support: reference l has unaligned access   [ path.c(54,27) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15415: vectorization support: gather was generated for the variable l:  strided by non-constant value   [ path.c(53,27) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15460: masked strided loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 21 
         remark #15477: vector loop cost: 5.250 
         remark #15478: estimated potential speedup: 3.490 
         remark #15479: lightweight vector operations: 23 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(52,13) inlined into path.c(236,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.c(217,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.c(218,9) ]
LOOP END
===========================================================================
