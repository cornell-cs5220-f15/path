Source Line  Source                                                                        CPU Time  CPU Time:Idle  CPU Time:Poor  CPU Time:Ok  CPU Time:Ideal  CPU Time:Over  Spin Time  Spin Time:Imbalance or Serial Spinning (OpenMP)  Spin Time:Lock Contention (OpenMP)  Spin Time:Communication (MPI)  Spin Time:Other  Overhead Time  Overhead Time:Creation (OpenMP)  Overhead Time:Scheduling (OpenMP)  Overhead Time:Reduction (OpenMP)  Overhead Time:Other
-----------  ----------------------------------------------------------------------------  --------  -------------  -------------  -----------  --------------  -------------  ---------  -----------------------------------------------  ----------------------------------  -----------------------------  ---------------  -------------  -------------------------------  ---------------------------------  --------------------------------  -------------------
45           /*                                                                                                                                                                                                                                                                                                                                                                                                                                                        
46            * Credit to Scott_wu. The blocking code is adopted from Scott_wu's matrix                                                                                                                                                                                                                                                                                                                                                                                
47            * multiplication work and modified for this assignment. The kernel function                                                                                                                                                                                                                                                                                                                                                                              
48            * comes from Scott_wu's work on the same project                                                                                                                                                                                                                                                                                                                                                                                                         
49            */                                                                                                                                                                                                                                                                                                                                                                                                                                                       
50           int basic_square(const int* restrict l, const int* restrict l_transpose,        0.310s             0s         0.310s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
51                                  int* restrict lnew, int done){                                                                                                                                                                                                                                                                                                                                                                                                     
52               // Kernel routine to compute small problem that fits into memory                                                                                                                                                                                                                                                                                                                                                                                      
53                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
54               __assume_aligned(l, 64);                                                                                                                                                                                                                                                                                                                                                                                                                              
55               __assume_aligned(l_transpose, 64);                                                                                                                                                                                                                                                                                                                                                                                                                    
56               __assume_aligned(lnew, 64);                                                                                                                                                                                                                                                                                                                                                                                                                           
57                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
58               int oi, oj, ok;                                                                                                                                                                                                                                                                                                                                                                                                                                       
59               int ta, tb, tc;                                                                                                                                                                                                                                                                                                                                                                                                                                       
60                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
61               for (int j = 0; j < BLOCK_SIZE; ++j) {                                      0.010s             0s         0.010s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
62                   oj = j * BLOCK_SIZE;                                                                                                                                                                                                                                                                                                                                                                                                                              
63                   for (int k = 0; k < BLOCK_SIZE; ++k) {                                  0.090s             0s         0.090s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
64                       ok = k * BLOCK_SIZE;                                                                                                                                                                                                                                                                                                                                                                                                                          
65                       tb = l_transpose[oj+k];                                                                                                                                                                                                                                                                                                                                                                                                                       
66                       for (int i = 0; i < BLOCK_SIZE; ++i) {                              0.379s             0s         0.379s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
67                           if (l[ok+i] + tb < lnew[oj+i]) {                                0.510s             0s         0.510s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
68                               lnew[oj+i] = l[ok+i] + tb;                                  0.390s             0s         0.390s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
69                               done = 0;                                                   0.030s             0s         0.030s           0s              0s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
70                           }                                                                                                                                                                                                                                                                                                                                                                                                                                         
71                       }                                                                                                                                                                                                                                                                                                                                                                                                                                             
72                   }                                                                                                                                                                                                                                                                                                                                                                                                                                                 
73               }                                                                                                                                                                                                                                                                                                                                                                                                                                                     
74              return done;                                                                                                                                                                                                                                                                                                                                                                                                                                           
