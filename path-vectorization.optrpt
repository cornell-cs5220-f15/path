
Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(247,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between mt line 60 and mt line 60
LOOP END

LOOP BEGIN at mt19937p.c(59,5) inlined into path.c(247,14)
<Remainder>
LOOP END

LOOP BEGIN at path.c(156,5) inlined into path.c(247,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between mt line 78 and mt line 83
   remark #15346: vector dependence: assumed FLOW dependence between mt line 83 and mt line 78

   LOOP BEGIN at path.c(157,7) inlined into path.c(247,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between mt line 78 and mt line 83
      remark #15346: vector dependence: assumed FLOW dependence between mt line 83 and mt line 78

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(247,14)
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(78,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(78,13) ]
         remark #15388: vectorization support: reference mt has aligned access   [ mt19937p.c(79,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 12 
         remark #15477: vector loop cost: 22.500 
         remark #15478: estimated potential speedup: 0.530 
         remark #15479: lightweight vector operations: 25 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 2 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(77,9) inlined into path.c(247,14)
      <Remainder>
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(247,14)
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(82,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15389: vectorization support: reference mt has unaligned access   [ mt19937p.c(83,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 23.500 
         remark #15478: estimated potential speedup: 0.460 
         remark #15479: lightweight vector operations: 20 
         remark #15480: medium-overhead vector operations: 2 
         remark #15487: type converts: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at mt19937p.c(81,9) inlined into path.c(247,14)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(203,5) inlined into path.c(249,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(205,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(206,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 205 and  line 206
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 206 and  line 205

   LOOP BEGIN at path.c(204,7) inlined into path.c(249,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(205,9) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(88,5) inlined into path.c(253,5)
<Peeled>
LOOP END

LOOP BEGIN at path.c(88,5) inlined into path.c(253,5)
   remark #15388: vectorization support: reference l has aligned access   [ path.c(90,13) ]
   remark #15388: vectorization support: reference l has aligned access   [ path.c(121,9) ]
   remark #15388: vectorization support: reference l has aligned access   [ path.c(90,13) ]
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 63 
   remark #15477: vector loop cost: 45.250 
   remark #15478: estimated potential speedup: 1.380 
   remark #15479: lightweight vector operations: 19 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(119,5) inlined into path.c(253,5)
LOOP END

LOOP BEGIN at path.c(88,5) inlined into path.c(253,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(130,5) inlined into path.c(253,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(50,5) inlined into path.c(253,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(51,7) inlined into path.c(253,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at path.c(55,9) inlined into path.c(253,5)
            remark #15388: vectorization support: reference lnew has aligned access   [ path.c(56,21) ]
            remark #15388: vectorization support: reference l has aligned access   [ path.c(57,21) ]
            remark #15388: vectorization support: reference lnew has aligned access   [ path.c(64,11) ]
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 35 
            remark #15477: vector loop cost: 8.750 
            remark #15478: estimated potential speedup: 3.970 
            remark #15479: lightweight vector operations: 31 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at path.c(55,9) inlined into path.c(253,5)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at path.c(95,5) inlined into path.c(253,5)
<Peeled>
LOOP END

LOOP BEGIN at path.c(95,5) inlined into path.c(253,5)
   remark #15388: vectorization support: reference l has aligned access   [ path.c(97,13) ]
   remark #15388: vectorization support: reference l has aligned access   [ path.c(97,13) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 23 
   remark #15477: vector loop cost: 2.500 
   remark #15478: estimated potential speedup: 8.160 
   remark #15479: lightweight vector operations: 10 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at path.c(95,5) inlined into path.c(253,5)
<Remainder>
LOOP END

LOOP BEGIN at path.c(188,5) inlined into path.c(260,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between sum2 line 190 and sum2 line 190
   remark #15346: vector dependence: assumed FLOW dependence between sum2 line 190 and sum2 line 190
LOOP END

LOOP BEGIN at path.c(203,5) inlined into path.c(264,9)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(205,9) ]
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(206,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 205 and  line 206
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 206 and  line 205

   LOOP BEGIN at path.c(204,7) inlined into path.c(264,9)
      remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ path.c(205,9) ]
   LOOP END
LOOP END

LOOP BEGIN at path.c(50,5) inlined into path.c(253,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at path.c(51,7) inlined into path.c(253,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at path.c(55,9) inlined into path.c(253,5)
         remark #15388: vectorization support: reference lnew has aligned access   [ path.c(56,21) ]
         remark #15388: vectorization support: reference l has aligned access   [ path.c(57,21) ]
         remark #15388: vectorization support: reference lnew has aligned access   [ path.c(64,11) ]
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 36 
         remark #15477: vector loop cost: 7.750 
         remark #15478: estimated potential speedup: 4.620 
         remark #15479: lightweight vector operations: 27 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at path.c(55,9) inlined into path.c(253,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at path.c(234,5)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ path.c(235,9) ]
LOOP END
===========================================================================
