Source Line  Source                                                              CPU Time  CPU Time:Idle  CPU Time:Poor  CPU Time:Ok  CPU Time:Ideal  CPU Time:Over  Spin Time  Spin Time:Imbalance or Serial Spinning (OpenMP)  Spin Time:Lock Contention (OpenMP)  Spin Time:Communication (MPI)  Spin Time:Other  Overhead Time  Overhead Time:Creation (OpenMP)  Overhead Time:Scheduling (OpenMP)  Overhead Time:Reduction (OpenMP)  Overhead Time:Other
-----------  ------------------------------------------------------------------  --------  -------------  -------------  -----------  --------------  -------------  ---------  -----------------------------------------------  ----------------------------------  -----------------------------  ---------------  -------------  -------------------------------  ---------------------------------  --------------------------------  -------------------
36            *
37            * The return value for `square` is true if `l` and `lnew` are
38            * identical, and false otherwise.
39            */
40
41           int square(int n,               // Number of nodes
42                      int* restrict l,     // Partial distance at step s
43                      int* restrict lnew)  // Partial distance at step s+1
44           {
45               int done = 1;
46               #pragma omp parallel for shared(l, lnew) reduction(&& : done)
47               for (int j = 0; j < n; ++j) {
48                   for (int i = 0; i < n; ++i) {
49                       int lij = lnew[j*n+i];                                    0.070s             0s         0.020s       0.010s          0.040s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
50                       for (int k = 0; k < n; ++k) {                            16.955s             0s         1.512s       0.902s         14.542s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
51                           int lik = l[k*n+i];                                  14.705s             0s         1.381s       0.822s         12.502s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
52                           int lkj = l[j*n+k];
53                           if (lik + lkj < lij) {                               20.158s             0s         2.096s       1.308s         16.755s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
54                               lij = lik+lkj;
55                               done = 0;                                         2.050s             0s         0.180s       0.172s          1.698s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
56                           }
57                       }
58                       lnew[j*n+i] = lij;                                        0.020s             0s         0.010s           0s          0.010s             0s          0                                               0s                                  0s                                              0s              0                               0s                                 0s                                0s                   0s
59                   }
60               }
61               return done;
62           }
63
64           /**
65            *
66            * The value $l_{ij}^0$ is almost the same as the $(i,j)$ entry of